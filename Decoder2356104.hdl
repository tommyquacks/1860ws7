CHIP Decoder2356104 {
    IN in[4];  // in[3]=w, in[2]=x, in[1]=y, in[0]=z
    OUT a, b, c, d, e, f, g;

    PARTS:
        Not(in=in[3], out=notw);
        Not(in=in[2], out=notx);
        Not(in=in[1], out=noty);
        Not(in=in[0], out=notz);

        // Segment a: (x & y) | (w & ~z) | (y & ~w) | (~x & ~z) | (x & z & ~w) | (w & ~x & ~y)
        And(a=in[2], b=in[1], out=term_a1);
        And(a=in[3], b=notz, out=term_a2);
        And(a=in[1], b=notw, out=term_a3);
        And(a=notx, b=notz, out=term_a4);
        And(a=in[2], b=in[0], out=tmp_a5);
        And(a=tmp_a5, b=notw, out=term_a5);
        And(a=in[3], b=notx, out=tmp_a6);
        And(a=tmp_a6, b=noty, out=term_a6);
        Or(a=term_a1, b=term_a2, out=tmp_a7);
        Or(a=tmp_a7, b=term_a3, out=tmp_a8);
        Or(a=tmp_a8, b=term_a4, out=tmp_a9);
        Or(a=tmp_a9, b=term_a5, out=tmp_a10);
        Or(a=tmp_a10, b=term_a6, out=a);

        // Segment b: (~w & ~x) | (~x & ~z) | (w & z & ~y) | (y & z & ~w) | (~w & ~y & ~z)
        And(a=notw, b=notx, out=term_b1);
        And(a=notx, b=notz, out=term_b2);
        And(a=in[3], b=in[0], out=tmp_b3);
        And(a=tmp_b3, b=noty, out=term_b3);
        And(a=in[1], b=in[0], out=tmp_b4);
        And(a=tmp_b4, b=notw, out=term_b4);
        And(a=notw, b=noty, out=tmp_b5);
        And(a=tmp_b5, b=notz, out=term_b5);
        Or(a=term_b1, b=term_b2, out=tmp_b6);
        Or(a=tmp_b6, b=term_b3, out=tmp_b7);
        Or(a=tmp_b7, b=term_b4, out=tmp_b8);
        Or(a=tmp_b8, b=term_b5, out=b);

        // Segment c: (w & ~x) | (x & ~w) | (z & ~w) | (z & ~y) | (~w & ~y)
        And(a=in[3], b=notx, out=term_c1);
        And(a=in[2], b=notw, out=term_c2);
        And(a=in[0], b=notw, out=term_c3);
        And(a=in[0], b=noty, out=term_c4);
        And(a=notw, b=noty, out=term_c5);
        Or(a=term_c1, b=term_c2, out=tmp_c6);
        Or(a=tmp_c6, b=term_c3, out=tmp_c7);
        Or(a=tmp_c7, b=term_c4, out=tmp_c8);
        Or(a=tmp_c8, b=term_c5, out=c);

        // Segment d: (w & ~y) | (x & y & ~z) | (x & z & ~y) | (y & z & ~x) | (~w & ~x & ~z)
        And(a=in[3], b=noty, out=term_d1);
        And(a=in[2], b=in[1], out=tmp_d2);
        And(a=tmp_d2, b=notz, out=term_d2);
        And(a=in[2], b=in[0], out=tmp_d3);
        And(a=tmp_d3, b=noty, out=term_d3);
        And(a=in[1], b=in[0], out=tmp_d4);
        And(a=tmp_d4, b=notx, out=term_d4);
        And(a=notw, b=notx, out=tmp_d5);
        And(a=tmp_d5, b=notz, out=term_d5);
        Or(a=term_d1, b=term_d2, out=tmp_d6);
        Or(a=tmp_d6, b=term_d3, out=tmp_d7);
        Or(a=tmp_d7, b=term_d4, out=tmp_d8);
        Or(a=tmp_d8, b=term_d5, out=d);

        // Segment e: (w & x) | (w & y) | (y & ~z) | (~x & ~z)
        And(a=in[3], b=in[2], out=term_e1);
        And(a=in[3], b=in[1], out=term_e2);
        And(a=in[1], b=notz, out=term_e3);
        And(a=notx, b=notz, out=term_e4);
        Or(a=term_e1, b=term_e2, out=tmp_e5);
        Or(a=tmp_e5, b=term_e3, out=tmp_e6);
        Or(a=tmp_e6, b=term_e4, out=e);

        // Segment f: (w & y) | (w & ~x) | (x & ~z) | (~y & ~z) | (x & ~w & ~y)
        And(a=in[3], b=in[1], out=term_f1);
        And(a=in[3], b=notx, out=term_f2);
        And(a=in[2], b=notz, out=term_f3);
        And(a=noty, b=notz, out=term_f4);
        And(a=in[2], b=notw, out=tmp_f5);
        And(a=tmp_f5, b=noty, out=term_f5);
        Or(a=term_f1, b=term_f2, out=tmp_f6);
        Or(a=tmp_f6, b=term_f3, out=tmp_f7);
        Or(a=tmp_f7, b=term_f4, out=tmp_f8);
        Or(a=tmp_f8, b=term_f5, out=f);

        // Segment g: (w & z) | (w & ~x) | (y & ~x) | (y & ~z) | (x & ~w & ~y)
        And(a=in[3], b=in[0], out=term_g1);
        And(a=in[3], b=notx, out=term_g2);
        And(a=in[1], b=notx, out=term_g3);
        And(a=in[1], b=notz, out=term_g4);
        And(a=in[2], b=notw, out=tmp_g5);
        And(a=tmp_g5, b=noty, out=term_g5);
        Or(a=term_g1, b=term_g2, out=tmp_g6);
        Or(a=tmp_g6, b=term_g3, out=tmp_g7);
        Or(a=tmp_g7, b=term_g4, out=tmp_g8);
        Or(a=tmp_g8, b=term_g5, out=g);
}
